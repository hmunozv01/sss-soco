//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SolicitudSoporteSistemas_prd
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SoporteICSA_prdEntities : DbContext
    {
        public SoporteICSA_prdEntities()
            : base("name=SoporteICSA_prdEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccionLog> AccionLog { get; set; }
        public virtual DbSet<Area> Area { get; set; }
        public virtual DbSet<CategoriaSolicitud> CategoriaSolicitud { get; set; }
        public virtual DbSet<CentroCostoyProyectos> CentroCostoyProyectos { get; set; }
        public virtual DbSet<DocAdjuntos> DocAdjuntos { get; set; }
        public virtual DbSet<DocTemplate> DocTemplate { get; set; }
        public virtual DbSet<Empresa> Empresa { get; set; }
        public virtual DbSet<EstadoSolicitud> EstadoSolicitud { get; set; }
        public virtual DbSet<Log> Log { get; set; }
        public virtual DbSet<ObraSalaVenta> ObraSalaVenta { get; set; }
        public virtual DbSet<Personal> Personal { get; set; }
        public virtual DbSet<PersonalRol> PersonalRol { get; set; }
        public virtual DbSet<PersonalSubCategoria> PersonalSubCategoria { get; set; }
        public virtual DbSet<Regional> Regional { get; set; }
        public virtual DbSet<Rol> Rol { get; set; }
        public virtual DbSet<Sociedades> Sociedades { get; set; }
        public virtual DbSet<Solicitante> Solicitante { get; set; }
        public virtual DbSet<Solicitud> Solicitud { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<SubCategoria> SubCategoria { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TareaSolicitud> TareaSolicitud { get; set; }
        public virtual DbSet<TipoDoc> TipoDoc { get; set; }
        public virtual DbSet<TipoLog> TipoLog { get; set; }
        public virtual DbSet<TipoSolicitud> TipoSolicitud { get; set; }
        public virtual DbSet<TipoTarea> TipoTarea { get; set; }
        public virtual DbSet<equiposoporte> equiposoporte { get; set; }
        public virtual DbSet<seguimientoproc> seguimientoproc { get; set; }
        public virtual DbSet<ResumenSolicitudes> ResumenSolicitudes { get; set; }
        public virtual DbSet<ResumenSolicitudesMobile> ResumenSolicitudesMobile { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int SP_APP_ActualizarInsertarEstadodeSolicitud(Nullable<int> idSolicitud, string userIdRed, string status_descr, Nullable<decimal> horas, ObjectParameter identificador, ObjectParameter objeto)
        {
            var idSolicitudParameter = idSolicitud.HasValue ?
                new ObjectParameter("idSolicitud", idSolicitud) :
                new ObjectParameter("idSolicitud", typeof(int));
    
            var userIdRedParameter = userIdRed != null ?
                new ObjectParameter("UserIdRed", userIdRed) :
                new ObjectParameter("UserIdRed", typeof(string));
    
            var status_descrParameter = status_descr != null ?
                new ObjectParameter("status_descr", status_descr) :
                new ObjectParameter("status_descr", typeof(string));
    
            var horasParameter = horas.HasValue ?
                new ObjectParameter("horas", horas) :
                new ObjectParameter("horas", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_APP_ActualizarInsertarEstadodeSolicitud", idSolicitudParameter, userIdRedParameter, status_descrParameter, horasParameter, identificador, objeto);
        }
    
        public virtual int SP_APP_InsertarStatusenSolicitud(Nullable<int> idSolicitud, string userIdRed, string status_descr, ObjectParameter identificador, ObjectParameter objeto)
        {
            var idSolicitudParameter = idSolicitud.HasValue ?
                new ObjectParameter("idSolicitud", idSolicitud) :
                new ObjectParameter("idSolicitud", typeof(int));
    
            var userIdRedParameter = userIdRed != null ?
                new ObjectParameter("UserIdRed", userIdRed) :
                new ObjectParameter("UserIdRed", typeof(string));
    
            var status_descrParameter = status_descr != null ?
                new ObjectParameter("status_descr", status_descr) :
                new ObjectParameter("status_descr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_APP_InsertarStatusenSolicitud", idSolicitudParameter, userIdRedParameter, status_descrParameter, identificador, objeto);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_APP_ObtenerHorasDelDiaxUsuario(string userIdRed)
        {
            var userIdRedParameter = userIdRed != null ?
                new ObjectParameter("UserIdRed", userIdRed) :
                new ObjectParameter("UserIdRed", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_APP_ObtenerHorasDelDiaxUsuario", userIdRedParameter);
        }
    
        public virtual ObjectResult<SP_APP_ObtenerHorasyTicketDelDiaxUsuario_Result> SP_APP_ObtenerHorasyTicketDelDiaxUsuario(string userIdRed)
        {
            var userIdRedParameter = userIdRed != null ?
                new ObjectParameter("UserIdRed", userIdRed) :
                new ObjectParameter("UserIdRed", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_APP_ObtenerHorasyTicketDelDiaxUsuario_Result>("SP_APP_ObtenerHorasyTicketDelDiaxUsuario", userIdRedParameter);
        }
    
        public virtual int SP_Carga_Centro_Costo_y_Proyectos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Carga_Centro_Costo_y_Proyectos");
        }
    
        public virtual int SP_Carga_Sociedades()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Carga_Sociedades");
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<SP_DB_Obtener_Categoria_Result> SP_DB_Obtener_Categoria()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_DB_Obtener_Categoria_Result>("SP_DB_Obtener_Categoria");
        }
    
        public virtual int SP_DB_Obtener_Estado_Solicitud_por_Responsable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DB_Obtener_Estado_Solicitud_por_Responsable");
        }
    
        public virtual int SP_DB_Obtener_Solicitantes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DB_Obtener_Solicitantes");
        }
    
        public virtual int SP_DB_Obtener_Solicitudes_Pendientes_Atrasadas_por_Responsable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DB_Obtener_Solicitudes_Pendientes_Atrasadas_por_Responsable");
        }
    
        public virtual ObjectResult<SP_DB_Obtener_Tipo_Solicitud_Result> SP_DB_Obtener_Tipo_Solicitud()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_DB_Obtener_Tipo_Solicitud_Result>("SP_DB_Obtener_Tipo_Solicitud");
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_grabarextensionsolicitud(Nullable<int> idSolicitud, string userIdRed, string status_descr, Nullable<decimal> horas, ObjectParameter identificador, ObjectParameter objeto)
        {
            var idSolicitudParameter = idSolicitud.HasValue ?
                new ObjectParameter("idSolicitud", idSolicitud) :
                new ObjectParameter("idSolicitud", typeof(int));
    
            var userIdRedParameter = userIdRed != null ?
                new ObjectParameter("UserIdRed", userIdRed) :
                new ObjectParameter("UserIdRed", typeof(string));
    
            var status_descrParameter = status_descr != null ?
                new ObjectParameter("status_descr", status_descr) :
                new ObjectParameter("status_descr", typeof(string));
    
            var horasParameter = horas.HasValue ?
                new ObjectParameter("horas", horas) :
                new ObjectParameter("horas", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_grabarextensionsolicitud", idSolicitudParameter, userIdRedParameter, status_descrParameter, horasParameter, identificador, objeto);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
